import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Period;
import java.util.List;
import java.time.ZoneId;
import java.time.temporal.ValueRange;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

String CHILD = "INFANT";
String ADULT = "ADULT";
String MINOR = "MINOR";
String MALE = 'MLE';
String FEMALE = 'FLE';
String NonResident = "FRN";
String Resident = "UGA";
String Others = "OTH";

String New = 	 "NEWREG";
String Renewal = "RENEWAL";
String Lost= 	 "LOST";
String Upadte =  "UPDATE";

String ByBirthNonIndigenousCommunity = "CBBNON";
String ByBirthIndigenousCommunity = "CBBI";
String ByNaturalisation = "NAT";
String ByRegistration = "CBREG";

String fatherNIN;
String motherNIN;

String DATE_PATTERN = "yyyy/MM/dd";
String regex = "^\\d{4}(\\/)(((0)[1-9])|((1)[0-2]))(\\/)([0-2][0-9]|(3)[0-1])$";
Pattern pattern = Pattern.compile(regex);

def isUpdateFlow(identity) {
  Object val = identity.getOrDefault('_flow', null);
  return (val == 'Update') ? true : false;
}

def getResidenceStatus(identity) {
    if(identity.containsKey('residenceStatusCode')) {
        return identity.getOrDefault('residenceStatusCode', null);
    }

    if(identity.containsKey('residenceStatus')) {
        Object val = identity.getOrDefault('residenceStatus', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}


def getUserCase(identity) {
     if(identity.containsKey('userCase')) {
        Object val = identity.getOrDefault('userCase', null);
          System.out.println("userCase" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}

def getCitizenhipType(identity) {
     if(identity.containsKey('applicantCitizenshipType')) {
        Object val = identity.getOrDefault('applicantCitizenshipType', null);
        System.out.println("getCitizenhipType" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}


def getFatherNIN(identity) {
     if(identity.containsKey('fatherNIN')) {
        Object val = identity.getOrDefault('fatherNIN', null);
    
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}


def getMotherNIN(identity) {
     if(identity.containsKey('motherNIN')) {
        Object val = identity.getOrDefault('motherNIN', null);
     
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}






def getGenderType(identity) {
    if(identity.containsKey('genderCode')) {
        return identity.getOrDefault('genderCode', null);
    }

    if(identity.containsKey('gender')) {
        Object val = identity.getOrDefault('gender', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}

def getAgeCode(identity) {
    if(ageGroups == null || !identity.containsKey('dateOfBirth'))
        return null;

    String dob = identity.get('dateOfBirth');
    if(!pattern.matcher(dob).matches())
        return null;
        
    LocalDate date = LocalDate.parse(dob, DateTimeFormatter.ofPattern(DATE_PATTERN));
    LocalDate currentDate = LocalDate.now(ZoneId.of("UTC"));
    
    if(date.isAfter(currentDate)) { return 'KER-MSD-151'; }
    
    int ageInYears = Period.between(date, currentDate).getYears();
    
    String ageGroup = null;
    for(String groupName : ageGroups.keySet()) {
        String[] range = ((String)ageGroups.get(groupName)).split('-');
        if(ValueRange.of(Long.valueOf(range[0]), Long.valueOf(range[1])).isValidIntValue(ageInYears)) {
            ageGroup = groupName;
        }
    }

   return ageGroup == null ? null : ageGroup;
}


def getBioExceptionFlag(identity) {
    if(!identity.containsKey('isBioException')) { return false; }
    Object val = identity.getOrDefault('isBioException', null);
    return (val == 'true') ? true : (( val == 'false' ) ? false : null);
}

def getApplicantType() {
  String itc = getResidenceStatus(identity);
  String genderType = getGenderType(identity);
  String ageCode = getAgeCode(identity);
  boolean isBioExPresent = getBioExceptionFlag(identity);

  String citizenshipType= getCitizenhipType(identity);
  String userCase= getUserCase(identity);
  String motherNIN= getMotherNIN(identity);
  String fatherNIN= getFatherNIN(identity);
  
  if( ageCode == 'KER-MSD-151' ) { return "KER-MSD-151"; }
  
  if(userCase == null || genderType == null || ageCode == null || isBioExPresent == null ) { 
      return isUpdateFlow(identity) ? "000" : "KER-MSD-147";
  }
  
  System.out.println(itc + " - " + genderType + " - " + ageCode + " - " + isBioExPresent);
  if(userCase=Renewal && citizenshipType==null && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
    return "001";
  }
  else if(userCase=Renewal && citizenshipType==null && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "002";
  }
  else if(userCase=Lost && citizenshipType==null && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "003";
  }
  else if(userCase=Lost && citizenshipType==null && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "004";
  } else {
    return "000";
  }
}
